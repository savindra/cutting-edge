package lk.ac.iit.humzearch;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import lk.ac.iit.humzearch.app.AppController;
import lk.ac.iit.humzearch.model.Response;
import lk.ac.iit.humzearch.model.UserData;

import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.NetworkImageView;
import com.parse.FindCallback;
import com.parse.GetCallback;
import com.parse.GetDataCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseImageView;
import com.parse.ParseInstallation;
import com.parse.ParsePush;
import com.parse.ParseQuery;
import com.parse.ParseUser;
import com.parse.SaveCallback;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.PersistableBundle;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.AlertDialog;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

public class ViewResponseItem extends ActionBarActivity {
	
	private final static String TAG = ViewResponseItem.class.getSimpleName();
	
	private Intent intent;
	private TextView txtName, txtTitle, txtArtist, txtDelete;
	private NetworkImageView imgUser;
	private ImageLoader imageLoader;
	private Button btnPlay, btnPause, btnAccept, btnReject;
	private SeekBar seekBar;
	
	private MediaPlayer mMediaplayer;
	private Handler timerHandler;
	private double timeElapsed = 0;
	private boolean isPlaying = false;
	
	private ParseUser currentUser;
	private ParseQuery<Response> responseQuery;
	private ParseFile imgFile, tuneFile;
	private File mediaFile;
	private Response response;
	private String responseObjId;
	private ProgressDialog progressDialog;
	private AlertDialog alertDialog;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.view_response_item);
		initialize();
		downloadData();
	}

	private void initialize() {
		
		intent = getIntent();
		imgUser = (NetworkImageView) findViewById(R.id.imgViewResponseItemUser);
		imageLoader = AppController.getInstance().getImageLoader();
		txtName = (TextView) findViewById(R.id.txtViewResponseName);
		txtTitle = (TextView) findViewById(R.id.txtViewResponseItemTitle);
		txtArtist = (TextView) findViewById(R.id.txtViewResponseItemArtist);
		txtDelete = (TextView) findViewById(R.id.txtViewResponseDelete);
		btnPlay = (Button) findViewById(R.id.btnViewResponsePlay);
		btnPause = (Button) findViewById(R.id.btnViewResponsePause);
		btnAccept = (Button) findViewById(R.id.btnViewResponseAccept);
		btnReject = (Button) findViewById(R.id.btnViewResponseReject);
		seekBar = (SeekBar) findViewById(R.id.seekBarViewResponse);
		mMediaplayer = new MediaPlayer();
		
		timerHandler = new Handler();
		
		currentUser = ParseUser.getCurrentUser();
		response = new Response();
		
		txtDelete.setVisibility(View.INVISIBLE);
		
		btnPlay.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				play();
			}
		});
		
		btnPause.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				pause();
			}
		});
		
		btnReject.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				getConfirmation("reject");
				
			}
		});
		
		btnAccept.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				getConfirmation("accept");
			}
		});
		
	}
	
	private void downloadData() {
		
		progressDialog = ProgressDialog.show(this, "", "Loading...", true);
		responseObjId = intent.getStringExtra("response_id");
		
		responseQuery = ParseQuery.getQuery("Response");
		responseQuery.whereEqualTo("objectId", responseObjId);
		responseQuery.include("createdBy");
		responseQuery.include("tune");
		responseQuery.getFirstInBackground(new GetCallback<Response>() {
			
			@Override
			public void done(Response object, ParseException e) {
				if(e == null){
					response = object;
					fillData(response);
					progressDialog.dismiss();
				}else{
					progressDialog.dismiss();
					Log.d(TAG, e.getMessage());
				}
				
			}
		});
	}
	
	private void fillData(Response response) {
		
		txtName.setText(response.getCreatedBy().getString("name"));
		txtArtist.setText(response.getArtist());
		txtTitle.setText(response.getTitle());
		imgUser.setImageUrl(response.getCreatedBy().getParseFile("image").getUrl(), imageLoader);
		mMediaplayer = MediaPlayer.create(this, Uri.parse(response.getParseObject("tune").getParseFile("tune").getUrl()));
		
		if(response.getParseUser("createdBy").getUsername().equalsIgnoreCase(currentUser.getUsername())){
			txtDelete.setVisibility(View.VISIBLE);
		}
	}
	
	private void getConfirmation(final String status){
		alertDialog = new AlertDialog.Builder(this).create();
		alertDialog.setMessage("Are you sure you want to " + status + " this response?");
		alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "No", new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				alertDialog.dismiss();
			}
		});
		
		alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Yes", new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				if(status.equalsIgnoreCase("accept"))
					getCurrentStatus("accept");
				else{
					getCurrentStatus("reject");
				}
				alertDialog.dismiss();
			}
		});
		alertDialog.show();
	}
	
	public void getCurrentStatus(final String action){
		responseQuery = ParseQuery.getQuery("Response");
		responseQuery.getInBackground(responseObjId, new GetCallback<Response>() {
			
			@Override
			public void done(Response object, ParseException e) {
				if(e == null){
					if(object.getStatus().equalsIgnoreCase("pending")){
						if(action.equalsIgnoreCase("accept"))
							accept();
						else
							reject();
					}else{
						displayToast("This response is already " + object.getStatus() + ".");
					}
				}else{
					Log.d(TAG, e.getMessage());
				}
			}
		});
	}
	
	private void accept(){
		responseQuery = ParseQuery.getQuery("Response");
		responseQuery.whereEqualTo("tune", response.getTune());
		responseQuery.include("tune");
		responseQuery.include("createdBy");
		responseQuery.findInBackground(new FindCallback<Response>() {
			
			@Override
			public void done(List<Response> objects, ParseException e) {
				if(e == null){
					for(Response r : objects){
						
						if(r.getObjectId().equalsIgnoreCase(responseObjId)){
							r.put("status", "accepted");
							r.getTune().put("status", "solved");
							addPoints(r.getCreatedBy());
						}else{
							r.put("status", "rejected");
						}
						
						r.saveEventually();
					}
					
				}else{
					Log.d(TAG, e.getMessage());
					displayToast(e.getMessage());
				}
				
			}
		});
		
	}
	
	public void addPoints(ParseUser user){
		ParseQuery<UserData> userDataQuery = ParseQuery.getQuery("UserData");
		userDataQuery.whereEqualTo("createdBy", user);
		userDataQuery.getFirstInBackground(new GetCallback<UserData>() {
			
			@Override
			public void done(UserData object, ParseException e) {
				if(e == null){
					object.increment("points", 10);
					object.saveEventually();
					displayToast("This response accepted successfully.");
					sendPushNotification();
				}else{
					Log.d(TAG, e.getMessage());
				}
				
			}
		});
	}
	
	public void sendPushNotification(){
		ParseQuery pushQuery = ParseInstallation.getQuery();
		pushQuery.whereEqualTo("user", response.getCreatedBy());
		
		ParsePush push = new ParsePush();
		push.setQuery(pushQuery);
		push.setMessage(ParseUser.getCurrentUser().getString("name") + " accepted your response as correct and you "
				+ "were awarded 10 points.");
		push.sendInBackground();
		
	}
	
	private void reject(){
		
		responseQuery = ParseQuery.getQuery("Response");
		responseQuery.getInBackground(responseObjId, new GetCallback<Response>() {
			
			@Override
			public void done(Response object, ParseException e) {
				if(e == null){
					object.put("status", "rejected");
					object.saveInBackground(new SaveCallback() {
						
						@Override
						public void done(ParseException e) {
							if(e == null){
								displayToast("Response rejected successfully.");
							}else{
								Log.d(TAG, e.getMessage());
								displayToast(e.getMessage());
							}
						}
					});
					
				}else{
					Log.d(TAG, e.getMessage());
					displayToast(e.getMessage());
				}
				
			}
		});
		
	}
	
	
	
	// Mediaplayer controllers
	private void play() {
		isPlaying = true;
		seekBar.setMax((int) mMediaplayer.getDuration());
		mMediaplayer.start();
		timeElapsed = mMediaplayer.getCurrentPosition();
		seekBar.setProgress((int) timeElapsed);
		timerHandler.postDelayed(updateSeekBarTime, 100);
	}
	
	private void pause(){
		mMediaplayer.pause();
		isPlaying = false;
	}
	
	private Runnable updateSeekBarTime = new Runnable() {
		@Override
		public void run() {
			
			if(isPlaying){
				timeElapsed = mMediaplayer.getCurrentPosition();
				seekBar.setProgress((int) timeElapsed);
				timerHandler.postDelayed(this, 100);
			}
		}
	};
	// Mediaplayer Controllers
	
	public void displayToast(String message){
		if(!message.equalsIgnoreCase(""))
			Toast.makeText(this, message, Toast.LENGTH_LONG).show();
	}
	

}
