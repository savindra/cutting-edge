package lk.ac.iit.humzearch;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import com.parse.GetCallback;
import com.parse.GetDataCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseImageView;
import com.parse.ParseQuery;

import lk.ac.iit.humzearch.model.TuneParse;
import android.app.Dialog;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.SeekBar;
import android.widget.TextView;

public class ViewTuneItemActivity extends ActionBarActivity {
	
	private final static String TAG = ViewTuneItemActivity.class.getSimpleName();
	
	private TextView txtName, txtArtist, txtLanguage, txtCountry, txtYear;
	private ParseImageView imgUser;
	private Button btnPlay, btnPause, btnAddRespone;
	private SeekBar seekBar;
	private MediaPlayer mMediaplayer;
	private double timeElapsed = 0;
	private boolean isPlaying = false;
	private Dialog responseDialog;
	
	private ParseFile imgFile, tuneFile;
	private File mediaFile;
	
	private ParseQuery<TuneParse> tuneQuery;
	private String tuneObjID;
	
	private Handler timerHandler;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.view_tune_item);
		initialize();
	}

	private void initialize() {
		txtName = (TextView) findViewById(R.id.txtViewTuneItemName);
		txtArtist = (TextView) findViewById(R.id.txtViewTuneItemArtist);
		txtLanguage = (TextView) findViewById(R.id.txtViewTuneItemLang);
		txtCountry = (TextView) findViewById(R.id.txtViewTuneItemCountry);
		txtYear = (TextView) findViewById(R.id.txtViewTuneItemYear);
		imgUser = (ParseImageView) findViewById(R.id.imgViewTuneItemUser);
		btnPlay = (Button) findViewById(R.id.btnViewTuneItemPlay);
		btnPause = (Button) findViewById(R.id.btnViewTuneItemPause);
		btnAddRespone = (Button) findViewById(R.id.btnViewTuneResponse);
		seekBar = (SeekBar) findViewById(R.id.seekBarViewTuneItem);
		
		btnAddRespone.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				addResponse();
				
			}
		});
		
		btnPlay.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				play();
				
			}
		});
		
		downloadData();
		
	}

	private void play() {
		seekBar.setMax((int) mMediaplayer.getDuration());
		mMediaplayer.start();
		timeElapsed = mMediaplayer.getCurrentPosition();
		seekBar.setProgress((int) timeElapsed);
		timerHandler.postDelayed(updateSeekBarTime, 100);
	}
	
	private Runnable updateSeekBarTime = new Runnable() {
		
		@Override
		public void run() {
			
			if(isPlaying){
				timeElapsed = mMediaplayer.getCurrentPosition();
				seekBar.setProgress((int) timeElapsed);
				timerHandler.postDelayed(this, 100);
			}
		}
	};

	private void downloadData() {
		tuneObjID = getIntent().getStringExtra("tuneParseID");
		
		tuneQuery = ParseQuery.getQuery("Tune");
		tuneQuery.whereEqualTo("objectId", tuneObjID);
		tuneQuery.include("createdBy");
		tuneQuery.getFirstInBackground(new GetCallback<TuneParse>() {
			
			@Override
			public void done(TuneParse tune, ParseException e) {
				if(e == null){
					fillData(tune);
				}else{
					Log.d(TAG, e.getMessage());
				}
			}
		});
		
	}
	
	private void fillData(TuneParse tune){
		txtName.setText(tune.getCreatedBy().getString("name"));
		txtArtist.setText(tune.getArtist());
		txtLanguage.setText(tune.getLanguage());
		txtCountry.setText(tune.getCountry());
		txtYear.setText(tune.getYear());
		
		imgFile = tune.getCreatedBy().getParseFile("image");
		if(imgFile != null){
			imgUser.setParseFile(imgFile);
			imgUser.loadInBackground();
		}
		
		tuneFile = tune.getParseFile("tune");
		tuneFile.getDataInBackground(new GetDataCallback() {
			
			@Override
			public void done(byte[] data, ParseException e) {
				if(e == null){
					byteToFile(data);
					initializeMediaPlayer();
				}else{
					Log.d(TAG, e.getMessage());
				}
			}
		});
		
		
	}
	
	private void initializeMediaPlayer() {
		mMediaplayer = new MediaPlayer();
		mMediaplayer = MediaPlayer.create(this, Uri.fromFile(mediaFile));	
	}

	public void byteToFile(byte[] data){
		mediaFile = new File(getOutputMediaFileUri());
		
		try {
			FileOutputStream fileOuputStream =  new FileOutputStream(mediaFile);
			fileOuputStream.write(data);
			fileOuputStream.close();
			
		} catch (Exception e) {
			Log.d(TAG, e.getMessage());
		}
	}
		
	
	private void addResponse() {
		
		responseDialog = new Dialog(this);
		responseDialog.setContentView(R.layout.view_tune_dialog);
		responseDialog.setTitle("Response");
		responseDialog.show();
	}
	
	public String getOutputMediaFileUri() {
        return (getOutputMediaFile()).getAbsolutePath();
    }
	
	private static File getOutputMediaFile(){
		File mediaStorageDir = new File(Environment.getExternalStorageDirectory().getAbsoluteFile(), "/humzearch");
		
		// Create the storage directory if it does not exist
        if (!mediaStorageDir.exists()) {
            if (!mediaStorageDir.mkdirs()) {
                Log.d(TAG, "Oops! Failed create "
                        + "humzearch" + " directory");
                return null;
            }
        }
        
        File mediaFile;
        mediaFile = new File(mediaStorageDir + File.separator + "audio-temp.mp3");
        try {
			mediaFile.createNewFile();
			Log.d(TAG, "file created.");
		} catch (IOException e) {
			e.printStackTrace();
		}
        
        return mediaFile;
	}

}
