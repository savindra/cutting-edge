package lk.ac.iit.humzearch.app;

import lk.ac.iit.humzearch.model.TuneParse;
import lk.ac.iit.humzearch.util.LruBitmapCache;
import android.app.Application;
import android.text.TextUtils;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.Volley;
import com.parse.Parse;
import com.parse.ParseACL;
import com.parse.ParseCrashReporting;
import com.parse.ParseObject;

public class AppController extends Application {
	 
    public static final String TAG = AppController.class.getSimpleName();
 
    private RequestQueue mRequestQueue;
    private ImageLoader mImageLoader;
 
    private static AppController mInstance;
 
    @Override
    public void onCreate() {
        super.onCreate();
        mInstance = this;
        
        ParseObject.registerSubclass(TuneParse.class);
        ParseCrashReporting.enable(this);

	    // Enable Local Datastore.
	    //Parse.enableLocalDatastore(this);

	    // Add your initialization code here
	    Parse.initialize(this, "puhgB4SKXYi0xf4OPkcoOW5eobRqe4ixjcmf0BA3", "Y5FOUaOgiGBklu0XhoeikKYRy4aehW1D5xQQRxuF");


	    //ParseUser.enableAutomaticUser();
	    ParseACL defaultACL = new ParseACL();
	    // Optionally enable public read access.
	    // defaultACL.setPublicReadAccess(true);
	    ParseACL.setDefaultACL(defaultACL, true);
    }
 
    public static synchronized AppController getInstance() {
        return mInstance;
    }
 
    public RequestQueue getRequestQueue() {
        if (mRequestQueue == null) {
            mRequestQueue = Volley.newRequestQueue(getApplicationContext());
        }
 
        return mRequestQueue;
    }
 
    public ImageLoader getImageLoader() {
        getRequestQueue();
        if (mImageLoader == null) {
            mImageLoader = new ImageLoader(this.mRequestQueue,
                    new LruBitmapCache());
        }
        return this.mImageLoader;
    }
 
    public <T> void addToRequestQueue(Request<T> req, String tag) {
        // set the default tag if tag is empty
        req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);
        getRequestQueue().add(req);
    }
 
    public <T> void addToRequestQueue(Request<T> req) {
        req.setTag(TAG);
        getRequestQueue().add(req);
    }
 
    public void cancelPendingRequests(Object tag) {
        if (mRequestQueue != null) {
            mRequestQueue.cancelAll(tag);
        }
    }
}